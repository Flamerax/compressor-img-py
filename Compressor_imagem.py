#!/usr/bin/env python# -*- coding: utf-8 -*-import osfrom PIL import ImageImage.MAX_IMAGE_PIXELS = None  # Remove o limite ou defina um valor alto (ex: 1 bilhão)def comprimir_imagens():    entrada = 'entrada'    saida = 'saida'    TAMANHO_MAXIMO_SEGURO = 30000  # Limite de dimensão em pixels        os.makedirs(saida, exist_ok=True)        for arquivo in os.listdir(entrada):        caminho_entrada = os.path.join(entrada, arquivo)                if not os.path.isfile(caminho_entrada):            continue        if arquivo.startswith('.') or arquivo == '.gitkeep':            continue                    try:            # Verifica o tamanho do arquivo antes de abrir            if os.path.getsize(caminho_entrada) > 500 * 1024 * 1024:  # 500MB                print(f"Arquivo muito grande ignorado: {arquivo}")                continue                            with Image.open(caminho_entrada) as img:                # Verifica dimensões da imagem                if max(img.size) > TAMANHO_MAXIMO_SEGURO:                    print(f"Imagem muito grande ignorada: {arquivo} ({img.size[0]}x{img.size[1]})")                    continue                                    # Redimensionar se necessário                if max(img.size) > 3000:                    fator = 3000 / max(img.size)                    novo_tamanho = (int(img.width * fator), int(img.height * fator))                    img = img.resize(novo_tamanho, Image.LANCZOS)                                # Configurações de compressão                kwargs = {}                if img.format == 'JPEG':                    kwargs = {'quality': 85, 'optimize': True, 'progressive': True}                elif img.format == 'PNG':                    kwargs = {'compress_level': 9, 'optimize': True}                    if img.mode in ['RGBA', 'RGB']:                        img = img.convert('P', palette=Image.Palette.ADAPTIVE, colors=256)                elif img.format == 'WEBP':                    kwargs = {'quality': 85}                                caminho_saida = os.path.join(saida, arquivo)                img.save(caminho_saida, **kwargs)                print(f"Processado: {arquivo} -> {img.size[0]}x{img.size[1]}px")                        except Exception as e:            print(f"Erro ao processar {arquivo}: {str(e)}")if __name__ == "__main__":    comprimir_imagens()